name: Build multi-platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

    
env:
  PROJECT: Aether
  COMPANY: S-audio
  VERSION: 1.0.0
  BUILD_TYPE: Release
  BUILD_DIR: build
  DISPLAY: :0 # linux pluginval needs this
  CMAKE_BUILD_PARALLEL_LEVEL: 3 # Use up to 3 cpus to build juceaide, etc

jobs:
  build_and_test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        include:
          - name: Windows
            os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
            cmake_gen: -G"Ninja Multi-Config"
            pluginval: ./pluginval.exe
          - name: Linux
            os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            pluginval: ./pluginval
          - name: macOS
            os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            pluginval: pluginval.app/Contents/MacOS/pluginval

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/${{ env.BUILD_DIR }}" >> "$GITHUB_OUTPUT"

    - name: Install Linux Deps
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt install libasound2-dev libx11-dev libxcomposite-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev libfreetype6-dev libglu1-mesa-dev libjack-jackd2-dev

    - name: Install Ninja
      if: runner.os == 'Windows'
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Set Xcode version
      if: runner.os == 'MacOS'
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.2'

    - name: Configure CMake
      run: cmake -B ${{ steps.strings.outputs.build-output-dir }} ${{ matrix.cmake_gen }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ env.BUILD_TYPE }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        ctest --build-config ${{ env.BUILD_TYPE }} --output-on-failure

    - name: Pluginval
      if: runner.os == 'MacOS'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: |
        curl -LO "https://github.com/Tracktion/pluginval/releases/download/v1.0.3/pluginval_${{ matrix.name }}.zip"
        7z x pluginval_${{ matrix.name }}.zip
        ${{ matrix.pluginval }} --strictness-level 10 --verbose --validate "${{ steps.strings.outputs.build-output-dir }}/${{ env.PROJECT }}_artefacts/${{ env.BUILD_TYPE }}/VST3/${{ env.PROJECT }}.vst3"

    - name: Create Installer Package (macOS)
      if: runner.os == 'MacOS'
      shell: bash
      run: |
        ${{ github.workspace }}/scripts/package_macos ${{ steps.strings.outputs.build-output-dir }}

    - name: Create Installer dmg (macOS)
      if: runner.os == 'MacOS'
      env:
        FILENAME: "${{ env.PROJECT }}-${{ matrix.name}}"
      run: |
        mkdir -p /tmp/${{ env.PROJECT }}
        mv ${{ steps.strings.outputs.build-output-dir }}/${{ env.PROJECT }}.pkg /tmp/${{ env.PROJECT }}
        hdiutil create /tmp/tmp.dmg -ov -volname "${{ env.FILENAME }}" -fs HFS+ -srcfolder "/tmp/${{ env.PROJECT }}"
        hdiutil convert /tmp/tmp.dmg -format UDZO -o "${{ runner.temp }}/${{ env.FILENAME }}.dmg"

    - name: Create Installer (Windows)
      if: runner.os == 'Windows'
      shell: bash
      env:
        INSTALLER_SCRIPT: "${{ steps.strings.outputs.build-output-dir }}/install.iss"
      run: |
        cp "${{ github.workspace }}/scripts/package_win/install.iss" "${{ env.INSTALLER_SCRIPT }}"
        sed -i "s/##PROJECT##/${{ env.PROJECT }}/g" "${{ env.INSTALLER_SCRIPT }}"
        sed -i "s/##COMPANY##/${{ env.COMPANY }}/g" "${{ env.INSTALLER_SCRIPT }}"
        sed -i "s/##VERSION##/${{ env.VERSION }}/g" "${{ env.INSTALLER_SCRIPT }}"
        iscc "${{ env.INSTALLER_SCRIPT }}"
        ls "${{ steps.strings.outputs.build-output-dir }}"

    - name: Ulpoad .zip (Linux)
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: Aether_${{ runner.os }}_${{ matrix.cpp_compiler }}
        path: ${{ steps.strings.outputs.build-output-dir }}/Aether_artefacts/Release/

    - name: Upload .dmg (macOS)
      if: runner.os == 'MacOS'
      uses: actions/upload-artifact@v4
      env:
        FILENAME: "${{ env.PROJECT }}-${{ matrix.name}}"
      with:
        name: ${{ env.FILENAME }}.dmg
        path: ${{ runner.temp }}/${{ env.FILENAME }}.dmg

    - name: Upload .exe (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      env:
        FILENAME: "${{ env.PROJECT }}-${{ matrix.name}}"
      with:
        name: ${{ env.FILENAME }}.exe
        path: "${{ steps.strings.outputs.build-output-dir }}/Output/${{ env.FILENAME }}.exe"
