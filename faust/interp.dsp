import("stdfaust.lib");

take(0,(a,b)) = a;
take(0,a) = a;
take(N,(a,b)) = take(N-1,b);

lagrange(N, y, x) = sum(i,N+1, take(i,y) * h(N,i,x))
with{
    h(N,n,x) = prod(i,N+1, select2(i==n,fac(n,i,x),1));
    fac(n,i,x) = (x - i)/((n - i)+(n==i));
};


lagrangeK = abs <: select2(<(1),
                    1 + _ * (-11/6 + _ * (1 + _ * (-1/6))),
                    1 + _ * (-1/2 + _ * (-1 + _ * (1/2)))
                );

hermiteK = abs <: select2(<(1),
                2 + _ * (-4 + _ * (5/2 + _ * (-1/2))),
                1 + _ * _ * (-5/2 +  _ * (3/2))
            );


hermite(y2,y1,y0,ym1) = _ <: c0 + _ * (c1 + _ * (c2 + _ * c3))
with {
    c0 = y0;
    c1 = 1/2*(y1-ym1);
    c2 = ym1 - 5/2*y0 + 2*y1 - 1/2*y2;
    c3 = 1/2*(y2-ym1) + 3/2*(y0-y1);
};

/*hermite2
h((x+3)/2) = -1/16 +  1/16x + 1/16x² - 1/16x³
h((x+2)/2) =          -1/4x +  1/4x² - 1/16x³
h((x+1)/2) =  9/16 - 11/16x - 1/16x² + 3/16x³
h(x/2) =         1          - 5/8x² + 3/16x³
h((x-1)/2) =  9/16 + 11/16x - 1/16x² - 3/16x³
h((x-2)/2) =           1/4x +  1/2x² - 3/16x³
h((x-3)/2) = -1/16 -  1/16x + 1/16x² + 1/16x³
h((x-4)/2) =                -  1/8x² + 1/16x³

h((x+3)/2) = [-1 +  1x + 1x² - 1x³]/16
h((x+2)/2) = [     -4x + 4x² - 1x³]/16
h((x+1)/2) = [ 9 - 11x - 1x² + 3x³]/16
h(x/2) =     [16       -10x² + 3x³]/16
h((x-1)/2) = [ 9 + 11x - 1x² - 3x³]/16
h((x-2)/2) = [      4x + 8x² - 3x³]/16
h((x-3)/2) = [-1 -  1x + 1x² + 1x³]/16
h((x-4)/2) = [          -2x² + 1x³]/16


                                            [-1    1    1    -1] [ 1 ]
                                            [ 0   -4    4    -1] [ x ]
                                            [ 9  -11   -1     3] [ x²]
[y(-3) y(-2) y(-1) y(0) y(1) y(2) y(3) y(4)][16    0  -10     3] [ x³]
                                            [ 9   11   -1    -3]
                                            [ 0    4    8    -3]
                                            [-1   -1    1     1]
                                            [ 0    0   -2     1]


                                             [y(-3)]
                                             [y(-2)]
           [ -1   0    9  16   9   0  -1   0][y(-1)]
[1 x x² x³][  1  -4  -11   0  11   4  -1   0][y(0)]   /16
           [  1   4   -1 -10  -1   8   1  -2][y(1)]
           [ -1  -1    3   3  -3  -3   1   1][y(2)]
                                             [y(3)]
                                             [y(4)]


c0 = -1/16(y[-3]+y[3]) + 9/16(y[-1]+y[1]) +y[0]
c1 =  1/16(y[-3]-y[3]) + 1/4(y[2]-y[-2]) + 11/16(y[1]-y[-1])
c2 =  1/16(y[-3]-y[-1]-y[1]+y[3]) + 1/4y[-2] + 1/2[2] -5/8y[0] - 1/8y[4]
c3 =  1/16(y[4]+y[3]-y[-2]-y[-3]) + 3/16(y[-1]+y[0]-y[1]-y[2])

*/

hermite2(ym3,ym2,ym1,y0,y1,y2,y3,y4) = _ <: c0 + _ * (c1 + _ * (c2 + _*c3))
with {
    c0 = -1/32*(ym3+y3) + 9/32*(ym1+y1) +y0/2;
    c1 =  1/32*(ym3-y3) + 1/8*(y2-ym2) + 11/32*(y1-ym1);
    c2 =  1/32*(ym3-ym1-y1+y3) + 1/8*ym2 + 1/4*y2 -5/16*y0 - 1/16*y4;
    c3 =  1/32*(y4+y3-ym2-ym3) + 3/32*(ym1+y0-y1-y2);
};

t=ba.time/255;

ym3 = -0.8;
ym2 = -0.8;
ym1 = -0.3;
y0 = -0.2;
y1 = 0.5;
y2 = 0.8;
y3 = 0.4;
y4 = -0.2;


/*
delay(n, d) = _ <: par(i,N+1,de.delay(n,(id+i))),fd : hermite2
with {
    N = 7;
    o = (N-1.0001)/2;
    dmo = d-o;
    id = int(dmo);
    fd = ma.frac(dmo);
};
*/

//process = os.oscsin(hslider("freq", 100, 10, 20000, 1)) : delay(1<<16, hslider("delay", 0.2, 0.01, 1, 0.01) * ma.SR);


